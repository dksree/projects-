#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

const int V = 5;        // Number of vertices (intersections)
const int SIZE = 100;   // Stack size

int stack[SIZE];        // Stack array
int top = -1;           // Stack top pointer

// Stack push function
void push(int value) {
    if (top >= SIZE - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = value;
}

// Stack pop function
int pop() {
    if (top < 0) {
        printf("Stack underflow\n");
        return INT_MIN;
    }
    return stack[top--];
}

// Helper function to find the minimum distance vertex
int minDistance(int dist[], int sptSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (sptSet[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

// Dijkstra's algorithm for shortest path
void dijkstra(int **graph, int src) {
    int dist[V];
    int sptSet[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;
        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printf("Using Dijkstra's Algorithm:\n");
    printf("Vertex\tDistance from Source %d\n", src);
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Bellman-Ford algorithm for shortest path
void bellmanFord(int **graph, int src) {
    int dist[V];
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[src] = 0;

    for (int i = 0; i < V - 1; i++)
        for (int u = 0; u < V; u++)
            for (int v = 0; v < V; v++)
                if (graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];

    // Check for negative-weight cycles
    for (int u = 0; u < V; u++)
        for (int v = 0; v < V; v++)
            if (graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                printf("Negative weight cycle detected!\n");
                return;
            }

    printf("Using Bellman-Ford Algorithm:\n");
    printf("Vertex\tDistance from Source %d\n", src);
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Main function
int main() {
    int **graph = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++) {
        graph[i] = (int *)malloc(V * sizeof(int));
    }

    // Initialize graph with sample values
    graph[0][0] = 0; graph[0][1] = 10; graph[0][2] = 0; graph[0][3] = 30; graph[0][4] = 100;
    graph[1][0] = 10; graph[1][1] = 0; graph[1][2] = 50; graph[1][3] = 0; graph[1][4] = 0;
    graph[2][0] = 0; graph[2][1] = 50; graph[2][2] = 0; graph[2][3] = 20; graph[2][4] = 10;
    graph[3][0] = 30; graph[3][1] = 0; graph[3][2] = 20; graph[3][3] = 0; graph[3][4] = 60;
    graph[4][0] = 100; graph[4][1] = 0; graph[4][2] = 10; graph[4][3] = 60; graph[4][4] = 0;

    int src = 0; // Start at node 0

    printf("Shortest Path Results:\n\n");
    dijkstra(graph, src);
    printf("\n");
    bellmanFord(graph, src);

    // Free allocated memory
    for (int i = 0; i < V; i++) {
        free(graph[i]);
    }
    free(graph);

    return 0;
}
